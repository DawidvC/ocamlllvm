(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Emission of x86-64 (AMD 64) assembly code *)

open Cmm
open Arch
open Emitaux

let macosx =
  match Config.system with
  | "macosx" -> true
  | _ -> false

(* Symbols *)

let emit_symbol s =
    if macosx then emit_string "_";
    Emitaux.emit_symbol '$' s

(* Output a label *)

let emit_label lbl =
  emit_string ".L"; emit_int lbl

(* Output a .align directive. *)

let emit_align n =
    let n = if macosx then Misc.log2 n else n in
  `module asm \"	.align	{emit_int n}\"\n`

(* Emission of data *)

let emit_item = function
    Cglobal_symbol s ->
      `module asm \" 	.globl	{emit_symbol s}\"\n`;
  | Cdefine_symbol s ->
      `module asm \"{emit_symbol s}:\"\n`
  | Cdefine_label lbl ->
      `module asm \"{emit_label (100000 + lbl)}:\"\n`
  | Cint8 n ->
      `module asm \"	.byte	{emit_int n}\"\n`
  | Cint16 n ->
      `module asm \"	.word	{emit_int n}\"\n`
  | Cint32 n ->
      `module asm \"	.long	{emit_nativeint n}\"\n`
  | Cint n ->
      `module asm \"	.quad	{emit_nativeint n}\"\n`
  | Csingle f ->
      emit_float32_directive ".long" f
  | Cdouble f ->
      emit_float64_directive ".quad" f
  | Csymbol_address s ->
      `module asm \"	.quad	{emit_symbol s}\"\n`
  | Clabel_address lbl ->
      `module asm \"	.quad	{emit_label (100000 + lbl)}\"\n`
  | Cstring s ->
      emit_string_directive "	.ascii	" s
  | Cskip n ->
      if n > 0 then `module asm \"	.space	{emit_int n}\"\n`
  | Calign n ->
      emit_align n

let data l =
  `module asm \"	.data\"\n`;
  List.iter emit_item l

let begin_assembly() = Emit_common.begin_assembly()

let end_assembly() = Emit_common.end_assembly()
